/**
 Program 1
 An ordered array that implements the priority queue interface.
 CS310
 20-February-2020
 @author Abdullahi Mohamed cssc1244
 */
package data_structures;
import java.util.Iterator;
import java.util.NoSuchElementException;


public class OrderedArrayPriorityQueue <E extends Comparable<E>> implements PriorityQueue<E>{

    E[] data;
    int counter;
    int position;


    @SuppressWarnings("unchecked")
    public OrderedArrayPriorityQueue() {
        data = (E[]) new Comparable[DEFAULT_MAX_CAPACITY];
    }

    @SuppressWarnings("unchecked")
    public OrderedArrayPriorityQueue(int length) {
        data = (E[]) new Comparable[length];
    }

    public boolean insert(E object) {
        if(isFull())
            return false;
        int here = InsertionHelp(object,0, counter-1);
        for(int i=counter-1;i>=here;i--) {
            data[i+1]=data[i];
        }
        data[here]=object;
        counter++;
        return true;
    }

    private int InsertionHelp(E object,int lo,int hi) {
        if(hi<lo) {
            return lo;
        }
        int mid= (lo+hi)/2;
        if( object.compareTo(data[mid])>=0) {
            return InsertionHelp(object,lo,mid-1);
        }//Go left
        return InsertionHelp(object,mid+1,hi);	//Go Right
    }

    public E remove() {
        if(isEmpty()) {
            return null;
        }
        else {
            E objneed=data[counter-1];
            counter--;
            return objneed;
        }
    }
    public boolean delete(E obj) {
        if(isEmpty()) {
            return false;
        }
        if(!contains(obj)) {
            return false;
        }
        int position = binarysearch(0,counter - 1, obj);
        while(data[position].compareTo(obj)==0) {
            for(int i = position;i < counter -1; i++) {
                data[i] = data[i + 1];
            }
            counter--;
            if(position!=0) {
                position--;
            }
        }
        return true;
    }
    public E peek() {
        if(isEmpty()) {
            return null;}
        else {
            return data[counter-1];
        }
    }
    private 	int binarysearch(int low,int high,E key) {
        if(low>high) {
            if(key.compareTo(data[high])==0) {
                return high;
            }
        }
        int mid=(low+high)/2;
        if(data[mid].compareTo(key)>=0) {
            low=mid+1;
            return binarysearch(low,high,key);
        }
        high=mid-1;
        return binarysearch(low,high,key);
    }

    public boolean contains(E obj) {
        int position = binarysearch(0, counter - 1, obj);
        if(position == -1) {
            return false;
        }
        if(data[position].compareTo(obj) == 0) {
            return true;
        }
        return false;
    }

    public int size() {
        return counter;
    }
    public void clear() {
        for(position=0;position<data.length;position++)
            data[position]=null;
        counter=0;
    }


    public boolean isEmpty() {
        if(counter == 0) {
            return true;
        }
        return false;
    }
    public boolean isFull() {
        if(counter==data.length) {
            return true;
        }
        else {
            return false;
        }
    }

    public Iterator<E> iterator() {
        return new Iterhelper();

    }

    public class Iterhelper<E> implements Iterator{
        int index=0;

        public boolean hasNext() {
            return (index<counter);
        }
        public E next() {
            if(!hasNext()) {
                throw new NoSuchElementException();
            }
            return (E) data[index++];
        }

    }
}
